# SPDX-License-Identifier: AGPL-3.0-only WITH LICENSE-ADDITIONAL
# Copyright (C) 2025 Петунин Лев Михайлович

# Импорт необходимых компонентов Flask
from flask import Blueprint, jsonify  # Blueprint для создания группы маршрутов, jsonify для JSON-ответов
import logging  # Стандартный модуль логирования Python

# Инициализация логгера для этого модуля
# __name__ автоматически подставляет имя текущего модуля (например 'k8s.readyz')
# Это помогает идентифицировать источник сообщений в логах
logger = logging.getLogger(__name__)

# Создание Blueprint (группы маршрутов) для проверки готовности
# 'readyz' - техническое имя Blueprint (используется Flask внутренне)
# __name__ - помогает Flask находить связанные ресурсы
readyz_bp = Blueprint('readyz', __name__)

# Регистрация обработчика для GET-запросов по пути '/readyz'
# Этот endpoint проверяет готовность сервиса принимать трафик
@readyz_bp.route('/readyz', methods=['GET'])
def readyz():
    # Запись отладочного сообщения (уровень DEBUG)
    # Важно для отслеживания частоты проверок в development-среде
    logger.debug("Проверка готовности сервиса")
    
    # Возвращаем JSON-ответ с информацией о состоянии
    # jsonify автоматически устанавливает правильные HTTP-заголовки
    # HTTP-статус 200 (OK) указывает на успешность проверки
    return jsonify({"status": "ready"}), 200

# Основные принципы работы этого endpoint:
#
# 1. Отличие от /healthz:
#    - /healthz проверяет "живость" сервиса (liveness)
#    - /readyz проверяет готовность обрабатывать запросы (readiness)
#
# 2. Типичные сценарии использования:
#    - Kubernetes использует для управления подами трафика
#    - Балансировщики нагрузки для исключения/включения нод
#    - В оркестраторах при rolling updates
#
# 3. В продакшн-среде следует добавить проверки:
#    - Доступность подключений к БД
#    - Загрузка CPU/памяти
#    - Наличие свободного места на диске
#    - Состояние кэшей
#
# 4. Оптимизации:
#    - Минимизировать внешние зависимости проверок
#    - Кэшировать результаты, если проверки ресурсоемкие
#    - Добавлять timeout для внешних проверок
#
# 5. Безопасность:
#    - Не должен раскрывать sensitive-информацию
#    - Можно добавить базовую аутентификацию
#    - Рекомендуется закрыть от публичного доступа